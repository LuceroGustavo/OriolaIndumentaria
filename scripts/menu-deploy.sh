#!/bin/bash
# menu-deploy.sh - Men√∫ interactivo para gesti√≥n de OriolaIndumentaria
# Servidor: LightNode - 149.104.92.116

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Funci√≥n para imprimir con colores
print_header() {
    echo -e "${CYAN}=========================================="
    echo -e "   ORIOLA INDUMENTARIA - MEN√ö DE GESTI√ìN"
    echo -e "==========================================${NC}"
}

print_option() {
    echo -e "${BLUE}$1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Funci√≥n para verificar si la aplicaci√≥n est√° corriendo
check_app_status() {
    if pgrep -f "oriola-denim-0.0.1-SNAPSHOT.jar" > /dev/null; then
        PID=$(pgrep -f "oriola-denim-0.0.1-SNAPSHOT.jar")
        echo -e "${GREEN}üü¢ Aplicaci√≥n corriendo (PID: $PID)${NC}"
        return 0
    else
        echo -e "${RED}üî¥ Aplicaci√≥n no est√° corriendo${NC}"
        return 1
    fi
}

# Funci√≥n para parar la aplicaci√≥n
stop_app() {
    print_option "1Ô∏è‚É£ Parando aplicaci√≥n..."
    if pgrep -f "oriola-denim-0.0.1-SNAPSHOT.jar" > /dev/null; then
        pkill -f "oriola-denim-0.0.1-SNAPSHOT.jar"
        sleep 3
        
        if pgrep -f "oriola-denim-0.0.1-SNAPSHOT.jar" > /dev/null; then
            print_warning "Forzando cierre..."
            pkill -9 -f "oriola-denim-0.0.1-SNAPSHOT.jar"
        fi
        print_success "Aplicaci√≥n detenida"
    else
        print_warning "No hay aplicaci√≥n corriendo"
    fi
}

# Funci√≥n para actualizar c√≥digo
update_code() {
    print_option "2Ô∏è‚É£ Actualizando c√≥digo desde GitHub..."
    git fetch origin
    if git pull origin master; then
        print_success "C√≥digo actualizado"
    else
        print_error "Error al actualizar c√≥digo"
    fi
}

# Funci√≥n para compilar
compile_app() {
    print_option "3Ô∏è‚É£ Compilando aplicaci√≥n..."
    print_warning "Esto puede tomar varios minutos..."
    if mvn clean package -DskipTests; then
        print_success "Compilaci√≥n exitosa"
    else
        print_error "Error en la compilaci√≥n"
    fi
}

# Funci√≥n para iniciar aplicaci√≥n
start_app() {
    print_option "4Ô∏è‚É£ Iniciando aplicaci√≥n..."
    if [ ! -f "target/oriola-denim-0.0.1-SNAPSHOT.jar" ]; then
        print_error "No se encontr√≥ el JAR. Compila primero (opci√≥n 3)"
        return 1
    fi
    
    nohup java -jar target/oriola-denim-0.0.1-SNAPSHOT.jar --spring.profiles.active=lightnode > /dev/null 2>&1 &
    sleep 5
    
    if check_app_status; then
        print_success "Aplicaci√≥n iniciada correctamente"
        echo -e "${CYAN}üåê Disponible en: http://149.104.92.116:8080${NC}"
    else
        print_error "Error al iniciar la aplicaci√≥n"
    fi
}

# Funci√≥n para despliegue completo
full_deploy() {
    print_option "5Ô∏è‚É£ Despliegue completo iniciado..."
    stop_app
    update_code
    compile_app
    start_app
    echo ""
    print_success "üéâ Despliegue completo finalizado"
}

# Funci√≥n para ver logs
view_logs() {
    print_option "7Ô∏è‚É£ Mostrando logs de la aplicaci√≥n..."
    if [ -f "nohup.out" ]; then
        echo -e "${YELLOW}√öltimas 50 l√≠neas de logs:${NC}"
        tail -50 nohup.out
        echo ""
        echo -e "${BLUE}Para ver logs en tiempo real: tail -f nohup.out${NC}"
    else
        print_warning "No se encontr√≥ archivo de logs"
    fi
}

# Funci√≥n para ver estado del sistema
system_status() {
    print_option "6Ô∏è‚É£ Estado del sistema:"
    echo ""
    echo -e "${CYAN}=== APLICACI√ìN ===${NC}"
    check_app_status
    echo ""
    echo -e "${CYAN}=== RECURSOS DEL SERVIDOR ===${NC}"
    echo "Uso de CPU y memoria:"
    top -bn1 | head -5
    echo ""
    echo -e "${CYAN}=== ESPACIO EN DISCO ===${NC}"
    df -h | grep -E "(Filesystem|/dev/)"
    echo ""
    echo -e "${CYAN}=== MEMORIA ===${NC}"
    free -h
}

# Funci√≥n para reiniciar aplicaci√≥n
restart_app() {
    print_option "8Ô∏è‚É£ Reiniciando aplicaci√≥n..."
    stop_app
    sleep 2
    start_app
}

# Funci√≥n para ver informaci√≥n del proyecto
project_info() {
    print_option "9Ô∏è‚É£ Informaci√≥n del proyecto:"
    echo ""
    echo -e "${CYAN}=== INFORMACI√ìN GIT ===${NC}"
    echo "Rama actual: $(git branch --show-current)"
    echo "√öltimo commit: $(git log -1 --oneline)"
    echo "Estado: $(git status --porcelain | wc -l) archivos modificados"
    echo ""
    echo -e "${CYAN}=== INFORMACI√ìN DEL PROYECTO ===${NC}"
    echo "Directorio: $(pwd)"
    echo "JAR disponible: $([ -f "target/oriola-denim-0.0.1-SNAPSHOT.jar" ] && echo "S√≠" || echo "No")"
    echo "Tama√±o del JAR: $([ -f "target/oriola-denim-0.0.1-SNAPSHOT.jar" ] && du -h target/oriola-denim-0.0.1-SNAPSHOT.jar | cut -f1 || echo "N/A")"
}

# Men√∫ principal
while true; do
    clear
    print_header
    echo ""
    check_app_status
    echo ""
    print_option "Selecciona una opci√≥n:"
    echo ""
    echo "1.  Parar aplicaci√≥n"
    echo "2.  Actualizar c√≥digo (git pull)"
    echo "3.  Compilar aplicaci√≥n"
    echo "4.  Iniciar aplicaci√≥n"
    echo "5.  Despliegue completo (1+2+3+4)"
    echo "6.  Ver estado del sistema"
    echo "7.  Ver logs de la aplicaci√≥n"
    echo "8.  Reiniciar aplicaci√≥n"
    echo "9.  Informaci√≥n del proyecto"
    echo "10. Salir"
    echo ""
    read -p "Ingresa tu opci√≥n (1-10): " opcion
    echo ""
    
    case $opcion in
        1) stop_app ;;
        2) update_code ;;
        3) compile_app ;;
        4) start_app ;;
        5) full_deploy ;;
        6) system_status ;;
        7) view_logs ;;
        8) restart_app ;;
        9) project_info ;;
        10) 
            print_success "Saliendo del men√∫..."
            exit 0 
            ;;
        *) 
            print_error "Opci√≥n inv√°lida. Presiona Enter para continuar..."
            read
            ;;
    esac
    
    echo ""
    read -p "Presiona Enter para continuar..."
done
